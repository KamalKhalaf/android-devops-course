apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'io.gitlab.arturbosch.detekt'

//
//apply plugin: 'io.fabric'

android {
    compileSdkVersion 31

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def name = versionProps['VERSION_NAME']
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.ramadan.androiddevops"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            versionName name
            versionCode code
            minSdkVersion 15
            targetSdkVersion 31

        }

        signingConfigs {
            release {
                keyAlias 'key'
                keyPassword '123456'
                storeFile file('../devops_key.jks')
                storePassword '123456'
                v2SigningEnabled false
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    increaseVersionCode()

}


def increaseVersionCode() {
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleRelease)) {
            /* when run release task */
            def versionPropsFile = file('version.properties')

            if (versionPropsFile.canRead()) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))

                def build = versionProps['VERSION_BUILD'].toInteger() + 1
                def code = versionProps['VERSION_CODE'].toInteger() + 1

                versionProps['VERSION_BUILD'] = build.toString()
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            } else {
                throw new GradleException("Could not read version.properties!")
            }
        }
    }
}

//task doIncrementVersionCode << {
//    println("Incrementing the Version Code")
//    increaseVersionCode()
//}

tasks.register("doIncrementVersionCode") {
    println("Incremnent version code")
    increaseVersionCode()
}





dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

//    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
//        transitive = true;
//    }

}
